// SnowFlake// Part of the SnowStorm class// Author : Andy Lyon// Date : 06/12/2008// Original author: Seb Lee-Delisle// // Modifed from the "SNOWSTORM IN 15 MINS" class from// Author : Seb Lee-Delisle// Blog : www.sebleedelisle.com// Company : www.pluginmedia.net//// This work is licensed under a Creative Commons  2.0 License.//// Full details at// http://creativecommons.org/licenses/by/2.0/uk///// You may re-use this code as you wish, but a credit would be // appreciated. And I'd love to see what you do with it! // mail me : seb@sebleedelisle.compackage com.ipolar.xmas{	import flash.display.Sprite;	import flash.geom.Rectangle;	import flash.filters.BlurFilter;		public class SnowFlake extends Sprite	{		// The x and y velocity of the snowflake		public var xVel:Number;		public var yVel:Number;				// The size of the snowflake		public var size:Number;				// And the limits of the screen		public var screenArea:Rectangle;				public function SnowFlake(screenarea:Rectangle)		{			// FIRST THINGS FIRST!			// let's draw a little dot.			graphics.lineStyle(3,0xffffff);			graphics.moveTo(0,0);			graphics.lineTo(0.2,0.2);						// store the screenArea rectangle			screenArea = screenarea;						// set the x position to a random position somewhere			// within the width of the screen area			x = Math.random()*screenArea.width;						// and a notional z value for the 3D flake.			// this is merely used to calculate the size the			// flake should be.						// (we could just give it a random size but			// the distribution wouldn't look as nice)			var z:Number = (Math.random()*600)-250;						// and calculate the size the flake would be			// if the flake was that z distance from the camera			size = calculatePerspectiveSize(z);						// let's scale up or down depending on how big we should be at			// this distance			scaleX = scaleY = size;						// if the z position is close to the camera			// then let's give it a depth of field blur!			// (z gets smaller as it moves towards the camera			//  and the blur amount gets bigger)			if(z<-150) {				// z will never be less than -250 so if we add 150 to it we				// should have a number between -100 and 0				var bluramount:Number = z+150;								// so now if we divide by -100 we should have a number between 0 and 1				bluramount /= -100;								// so if we want a blur amount between 2 and 22, we now have to multiply by 20 and add 2				bluramount = (bluramount * 20) + 2;								// and now add a blur filter to the filters array with that blur amount				filters = [new BlurFilter(bluramount, bluramount, 2)];			} else {				// let's add a small blur filter to all the snowflakes anyway				// to make them look a bit fluffier				filters = [new BlurFilter(2,2,2)];			}						// If we cache this sprite as a bitmap, the Flash players stores it			// as a bitmap which renders MUCH faster.			// NB! If you rescale or rotate this sprite, then the Flash player 			// will re-render it and then store the bitmap again, which is actually 			// slower than not setting cacheAsBitmap!			cacheAsBitmap = true;						// Now set a random x velocity between -1 and 1			xVel = (Math.random()*2)-1;						// And a constant downward velocity of 3 (gravity)			yVel = 3;						// Now let's multiply the velocity by the scale, so that things in the foreground appear to move faster			xVel*=size;			yVel*=size;		}				public function update(wind:Number):Boolean		{			// First let's add the x velocity to the x position			x+=xVel;			y+=yVel;						// The wind only affects the x position so let's add it to			// the x position (multiply by size so foreground flakes			// move faster!			x += (wind*size);						if(y > screenArea.bottom || x > screenArea.right || x < screenArea.left) {				return this.killParticle();			} else {				return false;			}		}				public function killParticle():Boolean		{			if (this.parent != null) {				this.parent.removeChild(this);				return true;			} else {				return false;			}		}				public function calculatePerspectiveSize(z:Number) : Number		{			// An arbitrary field of view (ish)			var fov:Number = 300;						// Dodgy magic function to calculate the scale factor for			// an object at the specified z position			return fov/(z+fov);		}	}}